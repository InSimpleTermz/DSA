# Bubble sort

def bubble_sort(arr):
    n = len(arr)
    # Traverse through all array elements
    for i in range(n): #1

        # Last i elements are already sorted
        for j in range(0, n - i - 1): #3

            # Swap if the element found is greater than the next element
            #34 > 25 > 12 > 22 > 11 > 64
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

print(bubble_sort([64, 34, 25, 12, 22, 11]))

# Insertion sort

def insertion_sort(lst):
    for i in range(1, len(lst)): #5
        current = lst[i]
        previous = i-1
        while current < lst[previous] and previous > -1:
            lst[previous + 1] = lst[previous]
            lst[previous] = current
            previous -= 1
    return lst

print(insertion_sort([1,2,3,4,5]))

# Merge sort

def merge(left, right):
        sorted_array = []
        i = 0
        j = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                sorted_array.append(left[i])
                i += 1
            else:
                sorted_array.append(right[j])
                j += 1

        sorted_array.extend(left[i:])
        sorted_array.extend(right[j:])

        return sorted_array

def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)

    return merge(left_sorted, right_sorted)

print(merge_sort([78,21,8,89,44,3,33,55]))

# Quick Sort

def swap(lst, index1, index2):
    temp = lst[index1]
    lst[index1] = lst[index2]
    lst[index2] = temp


def pivot(lst, p_index, end_index):
    swap_index = p_index

    for i in range(p_index+1, end_index+1):
        if lst[i] < lst[p_index]:
            swap_index += 1
            swap(lst, swap_index, i)
    swap(lst, p_index, swap_index)
    return swap_index

def quick_sort(lst, left, right):
    if left < right:
        p_index = pivot(lst, left, right)
        quick_sort(lst, left, p_index - 1)
        quick_sort(lst, p_index + 1, right)
    return lst


lst = [4,6,1,7,3,2,5]

quick_sort(lst, 0, len(lst)-1)

print(lst)
