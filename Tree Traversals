class Node:
    def __init__(self,value):
        self.value = value
        self.left = None
        self.right = None


class BST:
    def __init__(self):
        self.root = None

    def insert(self, value):
        node = Node(value)
        if self.root is None:
            self.root = node
            return "inserted as root"
        temp = self.root
        while temp is not None:
            if node.value == temp.value:
                return "Duplicate"

            elif node.value < temp.value:
                if temp.left is None:
                    temp.left = node
                    return "inserted in left side"
                temp = temp.left

            else:
                if temp.right is None:
                    temp.right = node
                    return "inserted in right side"
                temp = temp.right

    def search(self,value):
        if self.root == None:
            return "root is empty"
        temp = self.root

        while temp is not None:
            if temp.value == value:
                return temp.value
            elif value < temp.value:
                temp = temp.left
            else:
                temp = temp.right
        return "not found"

    def breadth_first_search(self):
        curr_node = self.root
        lst = []
        result = []
        lst.append(curr_node)

        while len(lst) > 0:
            current_node = lst.pop(0)
            result.append(current_node.value)
            if current_node.left is not None:
                lst.append(current_node.left)
            if current_node.right is not None:
                lst.append(current_node.right)
        return result

    def pre_order(self):
        lst = []

        def traverse(current_node):
            lst.append(current_node.value)
            if current_node.left is not None:
                traverse(current_node.left)
            if current_node.right is not None:
                traverse(current_node.right)

        traverse(self.root)
        return lst

    def post_order(self):
        lst = []

        def traverse(current_node):
            if current_node.left is not None:
                traverse(current_node.left)
            if current_node.right is not None:
                traverse(current_node.right)
            lst.append(current_node.value)

        traverse(self.root)
        return lst

    def in_order(self):
        lst = []

        def traverse(current_node):
            if current_node.left is not None:
                traverse(current_node.left)
            lst.append(current_node.value)
            if current_node.right is not None:
                traverse(current_node.right)


        traverse(self.root)
        return lst


tree = BST()
print(tree.insert(38))
print(tree.insert(65))
print(tree.insert(73))
print(tree.insert(48))
print(tree.insert(25))
print(tree.insert(10))
print(tree.insert(30))
print(tree.breadth_first_search())
print(tree.pre_order())
print(tree.post_order())
print(tree.in_order())

