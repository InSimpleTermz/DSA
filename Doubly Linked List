class Node:
    def __init__(self,value):
        self.value = value
        self.next = None
        self.pre = None


class LinkedList:
    def __init__(self,value):
        node = Node(value)
        self.head = node
        self.tail = node
        self.length = 1

    def append(self,value):
       node = Node(value)
       if self.head is None:
            self.head = node
            self.tail = node
       else:
            self.tail.next = node
            node.pre = self.tail
            self.tail = node
       self.length += 1

    def prepend(self,value):
        node = Node(value)

        if self.head is None:
            self.head = node
            self.tail = node
        else:
            node.next = self.head
            self.head.pre = node
            self.head = node
            self.length +=1


    def pop(self):
        if self.length == 0:
            return None

        temp = self.tail
        self.tail = temp.pre
        self.tail.next = None
        temp.pre = None
        self.length -= 1

        if self.length == 0:
            self.head = None
            self.tail = None

        return temp.value

    def first_pop(self):
        if self.length == 0:
            return None

        temp = self.head
        self.head = self.head.next
        self.head.pre = None
        temp.next = None
        self.length -= 1
        if self.length == 0:
            self.head = None
            self.tail = None
        return temp.value

    def print(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next


    def getnode(self, index):
        if index < 0 or index > self.length:
            return None

        temp = self.head
        for i in range(index):
            temp = temp.next

        return temp

    def set_value(self, index, value):
        temp = self.getnode(index)

        if temp is not None:
            temp.value = value
            return temp

    # insert(2,5)
    def insert(self, index, value):
        if index < 0 or index > self.length:
            return None
        if index == 0:
            return self.prepend(value)

        if index == self.length:
            return self.append(value)

        node = Node(value)
        before = self.getnode(index - 1)
        after = before.next

        node.pre = before
        node.next = after
        before.next = node
        after.pre = node

        self.length += 1
        return node

    def remove(self, index):
        if index < 0 or index >= self.length:
            return None

        if index == 0:
            return self.first_pop()

        if index == self.length - 1:
            return self.pop()

        temp = self.getnode(index)
        before = temp.pre
        after = temp.next

        before.next = after
        after.pre = before
        temp.next = None
        temp.pre = None
        self.length -= 1
        return temp.value


ll = LinkedList(10)
ll.append(20)
ll.append(30)
ll.prepend(40)

ll.print()
print("---------")
ll.insert(1,100)
ll.print()
print("----------")
print(ll.remove(1))
